@page "/"

@using BlazorExcercise.Data
@inject Catalogue catalogueService

<h1>Catalogue service</h1>
<div class="container">
    @if (!Products.Any())
     {
        <p><em>No product in the catalouge</em></p>
     }
     else
     {
        <table class="table">
            <thead>
                <tr>
                    <th>Product information</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var prod in Products)
                {
                <tr @onclick="(() => SetProductForUpdates(prod))">
                    <td>@prod.ToString()</td>
                    <td><button class="btn btn-danger" @onclick="(() => DeleteProduct(prod))">Delete</button></td>
                </tr>
                }
            </tbody>
        </table>
     }
</div>

<EditForm Model="@newProduct" OnValidSubmit="(() => AddProduct(newProduct))">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="name">Product name</label>
        <input @bind-value="@newProduct.Name" type="text" />
    </div>
    <div class="form-group">
        <label for="price">Product price</label>
        <input @bind-value="@newProduct.Price" type="text" />
    </div>
    <button class="btn btn-info" type="submit">Add Product</button>
</EditForm>

<EditForm Model="@updatedProduct">
    <div class="form-group">
        <label for="name">Product name</label>
        <input @bind-value="@updatedProduct.Name" type="text" />
    </div>
    <div class="form-group">
        <label for="price">Product price</label>
        <input @bind-value="@updatedProduct.Price" type="text" />
    </div>
    <button class="btn btn-info" @onclick="(() => UpdateProduct(updatedProduct))">Update Product</button>
</EditForm>

@code{
    private List<Product> Products;
    protected override async Task OnInitializedAsync()
    {
        Products = catalogueService.AllProducts().ToList();
        catalogueService.CatalogueChanged += UpdateGUI;
    }
    private void UpdateGUI()
    {
        Products = catalogueService.AllProducts().ToList();
    }
    Product newProduct = new Product();
    Product updatedProduct = new Product();
    private void AddProduct(Product p)
    {
        catalogueService.AddProduct(newProduct);
        newProduct = new Product();
    }
    private void SetProductForUpdates(Product selected)
    {
        updatedProduct = selected;
    }
    private void UpdateProduct(Product updated)
    {
        catalogueService.UpdateProduct(updated);
    }
    private void DeleteProduct(Product p)
    {
        catalogueService.RemoveProduct(p);
    }
}